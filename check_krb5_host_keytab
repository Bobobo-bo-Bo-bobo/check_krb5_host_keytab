#!/bin/bash

export PATH="/bin:/usr/bin:/sbin:/usr/sbin:${PATH}"

short_options="hR:H:u"
long_options="help,realm=,hostname=,uppercase"

OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3

REALM=""
HOSTNAME=""
FORCE_UPPERCASE="no"

function usage() {
	echo "Copyright (C) 2018-2020 by Andreas Maus <ecbeb08bb9f1b8e8f421fbf4c28e3033ecb13bc0@ypbind.de>"
	echo "This program comes with ABSOLUTELY NO WARRANTY."
	echo ""
	echo "This program is distributed under the Terms of the GNU General"
	echo "Public License Version 3. (http://www.gnu.org/copyleft/gpl.html)"
	echo ""
        echo "Usage: $0 [-h|--help] [-H <hostname>|--hostname=<hostname>] -R <realm>|--realm=<realm> [-u|--uppercase]"
	echo ""
	echo "  -h			Shows (this) help."
	echo "  --help"
	echo ""
	echo "  -H <hostname>		Force hostname to use."
	echo "  --hostname=<hostname>	Optional, default: $(hostname)"
	echo ""
	echo "  -R <realm>		Set kerberos realm to check."
	echo "  --realm=<realm>		Mandatory."
	echo ""
	echo "  -u			Convert hostname to UPPERCASE."
	echo "  --uppercase		Optional, default: ${FORCE_UPPERCASE}"
	echo ""
}

optparse=$(getopt -o ${short_options} --long ${long_options} -n "$(basename $0)" -- "$@")
if [ ${?} -ne 0 ]; then
    echo "Can't parse command line"
    exit ${UNKNOWN}
fi

eval set -- "${optparse}"

while true; do
    case "${1}" in
        "-h"|"--help")
                usage
                exit 0
                ;;
        "-H"|"--hostname")
                HOSTNAME="${2}"
                shift
                shift
                ;;
        "-R"|"--realm")
                REALM="${2}"
                shift
                shift
                ;;
	"-u"|"--uppercase")
		FORCE_UPPERCASE="yes"
		shift
		;;
        "--")
                shift
                break
                ;;
        *)
            echo "Unknown argument ${1}"
            usage
            exit 2
            ;;
    esac
done

if [ -z "${REALM}" ]; then
    echo "ERROR: Kerberos realm is mandatory"
    echo ""
    usage
    exit ${UNKNOWN}
fi

which kinit >/dev/null 2>&1

if [ ${?} -ne 0 ]; then
    echo "Error: kinit not found or not executable"
    exit ${UNKNOWN}
fi

which kdestroy >/dev/null 2>&1

if [ ${?} -ne 0 ]; then
    echo "Error: kdestroy not found or not executable"
    exit ${UNKNOWN}
fi

if [ -z "${HOSTNAME}" ]; then
    # if hostname has been set to the FQDN truncate it to the short hostname
    if [ "$(uname -s)" = "Linux" ]; then
	# only Linux has hostname --fqdn, on other UNIXes hostname --fqdn will
	# set the hostname to --fqdn
	if [ "$(hostname)" = "$(hostname --fqdn)" ]; then
	    HOSTNAME="$(hostname --short)"
	else
	    HOSTNAME="$(hostname)"
	fi
    else
	# a dot in the hostname is a good (but not the perfect) indication
	# of a FQDN
	if echo "${HOSTNAME}" | greq -q '\.'; then
	    HOSTNAME="$(hostname | cut -d '.' -f 1)"
	fi
    fi
fi

if [ -z "${HOSTNAME}" ]; then
    echo "Error: Can't get hostname"
    exit ${CRITICAL}
fi

if [ "${FORCE_UPPERCASE}" = "yes" ]; then
    HOSTNAME=$(echo "${HOSTNAME}" | tr '[:lower:]' '[:upper:]')
else
    HOSTNAME=$(echo "${HOSTNAME}" | tr '[:upper:]' '[:lower:]')
fi

kinit -k "host/${HOSTNAME}@${REALM}" >/dev/null 2>&1
if [ ${?} -ne 0 ]; then
    echo "No valid domain trust to kerberos realm ${REALM}"
    exit ${CRITICAL}
else
    echo "Valid domain trust to kerberos realm ${REALM}"
    exit ${OK}
fi

